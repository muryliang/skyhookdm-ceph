from .parser import SQLParser
from .skyhook import SkyhookRunner

class Query():
    def __init__(self):
        '''
        Initializes Query object state. 
        '''

        '''
        sk_runner keeps track of parsed segments, option handling, query execution,
        and packaging dataframe objects as binaries if requested (e.g. arrow objects)
        '''
        self.sk_runner = SkyhookRunner()
        
        '''        
        sk_parser handles parsing and translation to Skyhook command
            * Parses SQL Query into respective selection, projeciton, etc parts
            * Hands these parts to sk_runner dictionary
            * Fills in template and sends to sk_runner runquery operations
        '''
        self.sql_parser = SQLParser()

        self.options = {'--use-cls'       :  True,
                        '--quiet'         :    False,
                        '--pool'          :     'tpchdata',
                        '--num-objs'      : 2,
                        '--result-format' : 'SFT_ARROW',
                        '--output-format' : 'SFT_PYARROW_BINARY',
                        '--data-schema'   : '...'}

        self.query = {'selection'  : '',
                      'projection' : '',
                      'table-name' : '',
                      'options'    : self.options}
        
        self.dataframes = [] # TODO: Implement
        self.sk_cmd = ''
        self.results = None
    
    def handle_query(self, raw_input):
        '''
        Takes a SQL query, parses it, and executes it in Skyhook 
        '''
        self.sk_runner.create_template(self.options)

        '''
        Handle predefined Skyhook commands before SQL queries
        '''
        # DESCRIBE TABLE T
        if isinstance(raw_input, dict):
            if 'describe' in raw_input.keys():
                results = self.sk_runner.run_predefined(raw_input['describe'])
                return results

        queries = self.sk_parser.parse_query()
        print(queries)
        self.results = self.sk_runner.run_query(queries)

        return self.results

    def parse_query(self, statement):
        '''
        Parses a SQL statement and returns dictionary results
        '''
        sk_parser = SQLParser()
        res = sk_parser.parse_query(statement)[0]
        return res

    def set_selection(self, input):
        '''
        Sets the selection parameter for query 
        '''
        self.query['selection'] = input

    def set_projection(self, input):
        '''
        Sets the projection parameter for query
        '''
        self.query['projection'] = input

    def set_table_name(self, input):
        '''
        Sets the table name parameter for query
        '''
        self.query['table-name'] = input

    def set_option(self, option, value):
        '''
        Sets the option parameter to be the given value
        '''
        if option not in self.options.keys():
            print("Error: Not an option")
            return
        self.options[str(option)] = value 
        print(self.query)

    def set_query(self, statement):
        '''
        Parses query and appends to query kvs list
        '''
        parsed = self.parse_query(statement)
        self.query['selection'] = parsed['selection']
        self.query['projection'] = parsed['projection']
        self.query['table-name'] = parsed['table-name']
        print(self.query)

    def show_query(self):
        '''
        List most recently used query 
        '''
        return self.query

    def show_options(self):
        '''
        List all options and their current values
        '''
        return self.query['options']

    def show_results(self):
        '''
        Show results from previously ran query 
        '''
        return self.results

    def show_skyhook_cmd(self):
        '''
        Show the Skyhook command generated by current SQL statement
        '''
        return self.sk_cmd

    def show_template(self):
        '''
        Show Skyhook's template before generating SQL command 
        '''
        print(self.sk_runner.command_template)
        
    def generate_cli_cmd(self):
        '''
        Generates the command line command for run-query
        '''
        print(self.query)
        self.sk_cmd = self.sk_runner.create_cli_cmd(self.query)

    def execute_cli_cmd(self, cmd):
        '''
        Executes a cli command via run-query that was generated
        by the query object. 
        '''
        self.results = self.sk_runner.execute_command(self.sk_cmd)

    def generate_pyarrow_dataframe(self):
        '''
        Construct pyarrow dataframe
        '''
        raise NotImplementedError
